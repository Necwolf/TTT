import json
from jinja2 import Environment, FileSystemLoader
from weasyprint import HTML
import uuid
from datetime import datetime
import tempfile


LOCALIZATION = {
    "trip": "üöó –í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è",
    "name": "–Ü–º º—è:",
    "surname": "–ü—Ä—ñ–∑–≤–∏—â–µ:",
    "email": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞:",
    "from_city": "–ú—ñ—Å—Ç–æ –≤–∏—ó–∑–¥—É:",
    "to_city": "–ú—ñ—Å—Ç–æ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:",
    "from_date": "–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É:",
    "to_date": "–î–∞—Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
    "from_time": "–ì–æ–¥–∏–Ω–∞ –≤–∏—ó–∑–¥—É:",
    "to_time": "–ì–æ–¥–∏–Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:",
    "project": "–ü—Ä–æ—î–∫—Ç:",
    "contract": "‚Ññ –î–æ–≥–æ–≤–æ—Ä—É / –í–∏–¥ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:",
    "housing": "–ó–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è:",
    "transport": "–ó–∞ –ø—Ä–æ—ó–∑–¥:",
    "purpose": "–ú–µ—Ç–∞ –ø–æ—ó–∑–¥–∫–∏",
    "agenda": "–ê–¥–∂–µ–Ω–¥–∞",
    "invitation": "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è",
    "confirm": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–í–∫–∞–∑–∞–Ω—ñ –¥–∞–Ω—ñ —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏)",
    "confirmed": "‚úÖ –î–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
}


def flatten_fields(data):
    result = {}
    if not isinstance(data, dict):
        return result

    fields = data.get("data", {}).get("fields", [])
    for field in fields:
        if field.get("value") is None:
            continue

        label = field.get("label")
        if not label:
            continue

        value = field.get("value")
        options = field.get("options", [])

        if options:
            id_to_text = {opt["id"]: opt["text"] for opt in options if "id" in opt and "text" in opt}
            if isinstance(value, list):
                value = [id_to_text.get(v, v) for v in value]
            elif isinstance(value, str):
                value = id_to_text.get(value, value)

        if isinstance(value, list):
            value = ", ".join(str(v) for v in value)

        result[label] = value
    return result


def format_travel_message(data: dict) -> str:
    L = LOCALIZATION
    def extract_files(field_name):
        result = []
        value = data.get(field_name)
        if isinstance(value, str):
            try:
                parsed = json.loads(value.replace("'", '"'))
                if isinstance(parsed, dict):
                    result.append(parsed)
                elif isinstance(parsed, list):
                    result.extend(parsed)
            except json.JSONDecodeError:
                pass
        elif isinstance(value, dict):
            result.append(value)
        elif isinstance(value, list):
            result.extend(value)
        return result
    agenda_files = extract_files(L["agenda"])
    invite_files = extract_files(L["invitation"])
    message = f"{L['trip']}\n\n"
    message += f"üë§ <b>{data.get(L['name'], '')} {data.get(L['surname'], '')}</b>\n"
    message += f"üìß {data.get(L['email'], '')}\n"
    message += f"üìç –í–∏—ó–∑–¥ –∑: {data.get(L['from_city'], '')} ‚Üí {data.get(L['to_city'], '')}\n"
    message += f"üìÖ –î–∞—Ç–∞: {data.get(L['from_date'], '')} ‚Äî {data.get(L['to_date'], '')}\n"
    message += f"üïì –ß–∞—Å: {data.get(L['from_time'], '')} ‚Üí {data.get(L['to_time'], '')}\n\n"
    message += f"üßæ –ü—Ä–æ—î–∫—Ç: {data.get(L['project'], '')}\n"
    message += f"üìÑ –î–æ–≥–æ–≤—ñ—Ä: {data.get(L['contract'], '')}\n\n"
    message += f"ÔøΩÔøΩ –ü—Ä–æ–∂–∏–≤–∞–Ω–Ω—è: {data.get(L['housing'], '')}\n"
    message += f"üöå –ü—Ä–æ—ó–∑–¥: {data.get(L['transport'], '')}\n\n"
    message += f"üéØ –ú–µ—Ç–∞: {data.get(L['purpose'], '')}\n"
    def render_file_list(files, label):
        out = f"\nüìé <b>{label}:</b>\n"
        for idx, file in enumerate(files, 1):
            name = file.get("name", f"—Ñ–∞–π–ª {idx}")
            url = file.get("url")
            if url:
                out += f'üîó <a href="{url}">{name}</a>\n'
        return out
    if agenda_files:
        message += render_file_list(agenda_files, L["agenda"])
    if invite_files:
        message += render_file_list(invite_files, L["invitation"])
    if data.get(L["confirm"]):
        message += L["confirmed"]
    return message.strip()


def generate_pdf_from_data(data: dict, template_name: str = "travel_enhanced.html") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã, –∏—Å–ø–æ–ª—å–∑—É—è —É–ª—É—á—à–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    """
    env = Environment(loader=FileSystemLoader("templates"))
    template = env.get_template(template_name)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    def format_files(field_name):
        files = []
        value = data.get(field_name, "")
        if isinstance(value, str) and value:
            try:
                parsed = json.loads(value.replace("'", '"'))
                if isinstance(parsed, dict):
                    files.append(parsed)
                elif isinstance(parsed, list):
                    files.extend(parsed)
            except json.JSONDecodeError:
                pass
        elif isinstance(value, dict):
            files.append(value)
        elif isinstance(value, list):
            files.extend(value)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not files:
            return "-"

        file_list = []
        for file in files:
            name = file.get("name", "–§–∞–π–ª")
            url = file.get("url", "")
            if url:
                # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö URL –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                short_url = url[:50] + "..." if len(url) > 50 else url
                file_list.append(f'<a href="{url}" target="_blank">{name} ({short_url})</a>')
            else:
                file_list.append(name)

        return "<br>".join(file_list) if file_list else "-"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    def generate_req_number():
        now = datetime.now()
        return f"REQ-{now.strftime('%d')}/{now.strftime('%y')}"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –î–∞/–ù–µ—Ç
    def format_yes_no(value):
        if isinstance(value, str):
            value = value.lower()
            if value in ['—Ç–∞–∫', 'yes', 'true', '1', '–¥–∞']:
                return "–¢–∞–∫"
            elif value in ['–Ω—ñ', 'no', 'false', '0', '–Ω–µ—Ç']:
                return "–ù—ñ"
        return value if value else "–ù—ñ"

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    template_data = {
        "date_info": datetime.now().strftime("%d.%m.%Y"),
        "req_number": generate_req_number(),
        "executor_name": f"{data.get('–Ü–º º—è:', '')} {data.get('–ü—Ä—ñ–∑–≤–∏—â–µ:', '')}".strip(),
        "email": data.get("–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞:", ""),
        "contract_info": data.get("‚Ññ –î–æ–≥–æ–≤–æ—Ä—É / –í–∏–¥ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:", ""),
        "project_name": data.get("–ü—Ä–æ—î–∫—Ç:", ""),
        "service_purpose": data.get("–ú–µ—Ç–∞ –ø–æ—ó–∑–¥–∫–∏", "–ù–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥ –ø–æ–∑–∞ –æ—Å–Ω–æ–≤–Ω–∏–º –º—ñ—Å—Ü–µ–º –≤–µ–¥–µ–Ω–Ω—è –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ."),
        "departure_city": data.get("–ú—ñ—Å—Ç–æ –≤–∏—ó–∑–¥—É:", ""),
        "service_city": data.get("–ú—ñ—Å—Ç–æ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:", ""),
        "departure_date": data.get("–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É:", ""),
        "departure_time": data.get("–ì–æ–¥–∏–Ω–∞ –≤–∏—ó–∑–¥—É:", ""),
        "return_date": data.get("–î–∞—Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:", ""),
        "return_time": data.get("–ì–æ–¥–∏–Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:", ""),
        "transport_compensation": format_yes_no(data.get("–ó–∞ –ø—Ä–æ—ó–∑–¥:", "")),
        "accommodation_compensation": format_yes_no(data.get("–ó–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è:", "")),
        "invitation_files": format_files("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è"),
        "agenda_files": format_files("–ê–¥–∂–µ–Ω–¥–∞"),
    }

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML
    html_out = template.render(template_data)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        HTML(string=html_out).write_pdf(tmp.name)
        return tmp.name


def generate_simple_pdf_from_data(data: dict) -> str:
    """
    –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ PDF (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    """
    env = Environment(loader=FileSystemLoader("templates"))
    template = env.get_template("travel.html")

    html_out = template.render({
        "first_name": data.get("–Ü–º º—è:", ""),
        "last_name": data.get("–ü—Ä—ñ–∑–≤–∏—â–µ:", ""),
        "from_city": data.get("–ú—ñ—Å—Ç–æ –≤–∏—ó–∑–¥—É:", ""),
        "to_city": data.get("–ú—ñ—Å—Ç–æ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:", ""),
        "from_date": data.get("–î–∞—Ç–∞ –≤–∏—ó–∑–¥—É:", ""),
        "to_date": data.get("–î–∞—Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:", ""),
        "from_time": data.get("–ì–æ–¥–∏–Ω–∞ –≤–∏—ó–∑–¥—É:", ""),
        "to_time": data.get("–ì–æ–¥–∏–Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:", ""),
        "email": data.get("–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞:", ""),
        "project": data.get("–ü—Ä–æ—î–∫—Ç:", ""),
        "contract": data.get("‚Ññ –î–æ–≥–æ–≤–æ—Ä—É / –í–∏–¥ –Ω–∞–¥–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:", ""),
        "housing": data.get("–ó–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è:", ""),
        "transport": data.get("–ó–∞ –ø—Ä–æ—ó–∑–¥:", ""),
        "purpose": data.get("–ú–µ—Ç–∞ –ø–æ—ó–∑–¥–∫–∏", "")
    })

    filename = f"/tmp/travel_{uuid.uuid4().hex}.pdf"
    HTML(string=html_out).write_pdf(filename)
    return filename