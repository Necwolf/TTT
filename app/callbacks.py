from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from app.utils import generate_pdf_from_data, generate_simple_pdf_from_data
from app.parser import extract_data_from_message

router = Router()


def travel_buttons():
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì• –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_trip")],
            [
                InlineKeyboardButton(text="üìÑ PDF (–¥–µ—Ç–∞–ª—å–Ω–∏–π)", callback_data="send_pdf_detailed"),
                InlineKeyboardButton(text="üìÑ PDF (–ø—Ä–æ—Å—Ç–∏–π)", callback_data="send_pdf_simple")
            ],
            [InlineKeyboardButton(text="üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ email", callback_data="send_email")]
        ]
    )


@router.callback_query(lambda c: c.data == "confirm_trip")
async def handle_confirm(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏"""
    text = callback.message.text or callback.message.caption
    await callback.answer("‚úÖ –í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", show_alert=True)
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    print("CONFIRMATION TRIGGERED\n", text)


@router.callback_query(lambda c: c.data == "send_pdf_detailed")
async def handle_detailed_pdf(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ PDF"""
    try:
        text = callback.message.text
        data = extract_data_from_message(text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π PDF —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º
        pdf_path = generate_pdf_from_data(data, "travel_enhanced.html")

        await callback.message.answer_document(
            FSInputFile(pdf_path),
            caption="üìù –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π PDF –∑–≤—ñ—Ç –ø—Ä–æ –≤—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è"
        )
        await callback.answer("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∏–π PDF –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")

    except Exception as e:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF", show_alert=True)
        print(f"Error generating detailed PDF: {e}")


@router.callback_query(lambda c: c.data == "send_pdf_simple")
async def handle_simple_pdf(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ PDF"""
    try:
        text = callback.message.text
        data = extract_data_from_message(text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π PDF —Å–æ —Å—Ç–∞—Ä—ã–º —à–∞–±–ª–æ–Ω–æ–º
        pdf_path = generate_simple_pdf_from_data(data)

        await callback.message.answer_document(
            FSInputFile(pdf_path),
            caption="üìù –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Å—Ç–∏–π PDF –∑–≤—ñ—Ç –ø—Ä–æ –≤—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è"
        )
        await callback.answer("‚úÖ –ü—Ä–æ—Å—Ç–∏–π PDF –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")

    except Exception as e:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF", show_alert=True)
        print(f"Error generating simple PDF: {e}")


@router.callback_query(lambda c: c.data == "send_email")
async def handle_email(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ email (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        text = callback.message.text
        data = extract_data_from_message(text)

        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        pdf_path = generate_pdf_from_data(data)

        await callback.message.answer_document(
            FSInputFile(pdf_path),
            caption="üìß –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email"
        )
        await callback.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è email")

    except Exception as e:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ email", show_alert=True)
        print(f"Error preparing email: {e}")